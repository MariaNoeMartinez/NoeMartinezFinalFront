{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\carrera programaci\\xF3n\\\\FRONT END III\\\\fe3-final-main\\\\src\\\\Components\\\\utils\\\\global.context.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const initialState = {\n  temas: {\n    claro: {\n      navbar: \"amarillo\",\n      home: \"rosa\",\n      footer: \"naranja\",\n      letras: \"negras\"\n    },\n    oscuro: {\n      navbar: \"negro\",\n      home: \"fucsia\",\n      footer: \"verde\",\n      letras: \"claras\"\n    }\n  }\n};\nexport const ContextGlobal = /*#__PURE__*/createContext(initialState);\nexport const ContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [tema, setTema] = useState(initialState.temas.claro);\n\n  const handleTheme = () => {\n    setTema(t => t === initialState.temas.claro ? initialState.temas.oscuro : initialState.temas.claro);\n  }; //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n\n  return /*#__PURE__*/_jsxDEV(ContextGlobal.Provider, {\n    value: {\n      tema,\n      handleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContextProvider, \"jele32WXv0NAMI0VvF/Ps6e1lzU=\");\n\n_c = ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","initialState","temas","claro","navbar","home","footer","letras","oscuro","ContextGlobal","ContextProvider","children","tema","setTema","handleTheme","t"],"sources":["C:/Users/pc/Desktop/carrera programaciÃ³n/FRONT END III/fe3-final-main/src/Components/utils/global.context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\n\nexport const initialState = {\ntemas: {\n  claro: {\n     navbar: \"amarillo\",\n     home: \"rosa\",\n     footer: \"naranja\",\n     letras: \"negras\"\n  },\n  oscuro: {\n    navbar: \"negro\",\n    home: \"fucsia\",\n    footer: \"verde\",\n    letras: \"claras\"\n  }\n }\n}\n\nexport const ContextGlobal = createContext(initialState);\n\nexport const ContextProvider = ({ children }) => {\n    const [tema, setTema]= useState(initialState.temas.claro)\n   \n     const handleTheme = () => {\n    setTema ((t)=> (t===initialState.temas.claro ? initialState.temas.oscuro: initialState.temas.claro))\n    }\n  //Aqui deberan implementar la logica propia del Context, utilizando el hook useMemo\n\n  return (\n    <ContextGlobal.Provider value={{tema,handleTheme}}>\n      {children}\n    </ContextGlobal.Provider>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;;AAEA,OAAO,MAAMC,YAAY,GAAG;EAC5BC,KAAK,EAAE;IACLC,KAAK,EAAE;MACJC,MAAM,EAAE,UADJ;MAEJC,IAAI,EAAE,MAFF;MAGJC,MAAM,EAAE,SAHJ;MAIJC,MAAM,EAAE;IAJJ,CADF;IAOLC,MAAM,EAAE;MACNJ,MAAM,EAAE,OADF;MAENC,IAAI,EAAE,QAFA;MAGNC,MAAM,EAAE,OAHF;MAINC,MAAM,EAAE;IAJF;EAPH;AADqB,CAArB;AAiBP,OAAO,MAAME,aAAa,gBAAGV,aAAa,CAACE,YAAD,CAAnC;AAEP,OAAO,MAAMS,eAAe,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC7C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAiBb,QAAQ,CAACC,YAAY,CAACC,KAAb,CAAmBC,KAApB,CAA/B;;EAEC,MAAMW,WAAW,GAAG,MAAM;IAC3BD,OAAO,CAAGE,CAAD,IAAOA,CAAC,KAAGd,YAAY,CAACC,KAAb,CAAmBC,KAAvB,GAA+BF,YAAY,CAACC,KAAb,CAAmBM,MAAlD,GAA0DP,YAAY,CAACC,KAAb,CAAmBC,KAAtF,CAAP;EACC,CAFA,CAH4C,CAM/C;;;EAEA,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAE;MAACS,IAAD;MAAME;IAAN,CAA/B;IAAA,UACGH;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAbM;;GAAMD,e;;KAAAA,e"},"metadata":{},"sourceType":"module"}